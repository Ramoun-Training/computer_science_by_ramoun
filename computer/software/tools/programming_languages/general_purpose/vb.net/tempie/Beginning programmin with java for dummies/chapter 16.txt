Refresh for Enum:
------------------
enum seasons {WINTER,SUMMER,SPRING,AUTOMN}
class blah {
	public blah bleah main {
		seasons x = seasons.SUMMER;
		...
		..
		.
	}
}

Arrays:
-------
Imagine an array as an entire motel (one floor)
the entire row of rooms is called an array.
Each room in the array is called a component of the array (also known as an
array element). Each component has two numbers associated with it:
 ✓ Index: In the case of the Java Motel array, the index is the room number
 (a number from 0 to 9).
 ✓ Value: In the Java Motel array, the value is the number of guests in a
 given room (a number stored in a component of the array).

 NOTE:
 To declare an array with ten values in it, you can write two fairly short lines of code:
 // 	int guestsIn[];
 // 	guestsIn = new int[10];

 You can even squish these two lines into one longer line:
 //		int gustsIn[] = new int[10];

 NOTE:
In creating an array, you always specify the number of components. The
array’s indices always start with 0 and end with the number that’s one fewer
than the total number of components. For example, if your array has ten components (and you declare the array with new int[10] ), the array’s indices
go from 0 to 9.

NOTE:
-----
When you work with an array, and you step through the array’s components
using a for loop, you normally start the loop’s counter variable at 0. To form
the condition that tests for another iteration, you often write an expression
like roomNum < arraySize, where arraySize is the number of components in the array.

Declaring Arrays:
-----------------
i.e: int a [];
 or: int [] a;

Arrays creation:
----------------
i.e: a = new int [4]; // reserving four places in ram.

Arrays declaration & creation:
------------------------------
i.e: int a [] = new int [4];

Arrays intialization:
---------------------
i.e: a[0] = 5;
	 a[1] = 3;
	 a[2] = 7;
	 a[3] = 2;

Arrays creation and intialization:
-----------------------------------
i.e: a = new int [] {5,3,7,2}; // no need to determine length cause java counts # of elements and do it.

Arrays declaration,creation and initialization:
-----------------------------------------------
i.e: int a [] = new int [] {5,3,7,2};
or : int a [] = {5,3,7,2} // used more easier.

NOTE:if you didn't initialize the array all the elements have the value of 0.
	 if you declared an array (and didn't create it.) and try to print it you get a compile-time exception.

DISCLAIMER:
Don't use enhanced for loops to enter or change data inside an array.
Because the values of the elements won't change.

NOTE:
The enhanced for loop is used for displaying purposes only.

i.e:
You're changing the iteration variable c. That doesn't change the contents of the array. The iteration variable is just a copy of the array element. If you want to modify the array, you need to do so explicitly:
for (int i = 0; i < array.length; i++) {
    if (array[i] == 'o') {
        array[i] = 'a';
    }
}

The enhanced for loop be like:
for (int i = 0; i < array.length; i++) {
    char c = array[i];
    if (c == 'o') {
        c = 'a'; 
    }
}

Changing the value of a local variable will never change anything else - it just changes the local variable. The assignment:

char c = array[i];

copies the value in the array into a local variable. It doesn't associate the local variable with the array element perpetually.

delete several files:
=====================
File folder = new File("Path_of_the_folder");
for (File file : folder.listFiles()) {
	if (file.getName().endsWith(".txt")) {
		file.delete();
	}
}
-----------
getName() : shows the name of the file.(returns it as a string type)
endsWith() : checks if a string endsWith a specific string chain.
listFiles() : returns an array of the files in that directory as elements.
