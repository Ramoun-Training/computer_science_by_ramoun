union(x,y)
x <- c(1, 2, 3, 4)
y <- c(3, 4, 5, 6)
union(x,y)
is.element(2,x)
2 %in% y
intersect(x,y)
setdiff(x,y)
setequal(x, x)
setequal(y, c(6,5,4,3))
is.element(x,y)
x+y
1:4
x <- 1:4
y <- c(3, 4, 5, 6)
x <- 1:4 y <- 3:6 # set comparisons setequal(x, x) setequal(y, c(6,5,4,3)) # is the value 2 in a set? is.element(2,x) 2 %in% y # check each element of x for being in y is.element(x,y) # common set operations union(x, y) intersect(x, y) setdiff(x, y)
union(x,y,z)
xy <- union(x, y)
xy
union(xy, z)
z <- c('a', 'b', 'c')
)
mode(z)
union(x, y)
z <- c('a', 'b', 'c')
mode(x)
mode(z)
union(x,z)
intersect(x, z)
union(union(x,y),z)
sample.space <- c(0,1)
# simulate 100 coin flips - we expect 1/2 to be heads (50 coins) sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5))
print("P(tail) = ", sum(flips))
print("P(tail) = " + sum(flips))
print(sum(flips))
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) print(sum(flips))
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) print(sum(flips))
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) print(sum(flips))
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) print(sum(flips))
sum(flips)
sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 100 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
# draw from a sample space with exact probabilities sample.space <- c(0, 1) N <- 1000 flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips)/N
x <- 1:4
x <- 1:4
y <- 3:6
setequal(x,x)
setequal(x,y)
setequal(y, c(6,5,4,3))
y
c(6,5,3,4)
is.element(2,x)
2 %in% y
is.element(x, y)
union(x,y)
intersect(x,y)
setdiff(x,y)
z <- c('a','b','c')
mode(x)
mode(z)
union(x,z)
mode(u)
u <- union(x, z)
mode(u)
intersect(x,z)
union(union(x,y),z)
choose(5,2)
lchoose(5,2)
lchoose(10,3)
lchoose(10,3)/(2^10)
lchoose(3,10)/(2^10)
choose(10,3)/(2^10)
choose(10,4)/(2^10)
(choose(10,0)+choose(10,1)+choose(10,2)+choose(10,3))/(2^10)
(choose(10,0)+choose(10,1)+choose(10,2)+choose(10,3)+choose(10,4))/(2^10)
choose(15,3)*choose(30,7)/choose(45,10)
choose(10,4)*choose(6,3)
factorial(12)/(factorial(3)*factorial(4)*factorial(5))
x <- 1:4
y <- 3:6
setequal(x,x)
setequal(x,y)
setequal(y, c(6,5,4,3))
is.element(2, x)
2 %in% y
is.element(x, y)
union(x, y)
intersect(x,y)
setdiff(x,y)
z <- c('a', 'b', 'c')
mode(x)
mode(z)
a <- union(x,z)
a
mode(a)
intersect(x,z)
union(union(x,y), z)
N <- 100 flips <- runif(N, min = 0, max = 1) > 0.5 sum(flips)/N
N <- 1000 flips <- runif(N, min = 0, max = 1) > 0.5 sum(flips)/N
sample.space <- c(0, 1) flips <- sample(sample.space, N, replace = TRUE, prob = c(0.5, 0.5)) sum(flips) / N
require("Rmfpr")> require("Rmfpr")
require("Rmpfr")> require("Rmpfr")
require("Rmpfr") perm <- function(n, k) {     return (factorialMpfr(n)/factorialMpfr(n-k)) } count <- 50 p <- double(count) for (k in 1:count) {     d <- (1 - perm(365, k) / (mpfr(365, precBits = 1024) ^ k)) * 100     p[k] <- asNumeric(d) } plot(1:count, p, xlab = "Number of people in the room",     ylabel="Probability in %")
require("Rmpfr") perm <- function(n, k) {     return (factorialMpfr(n)/factorialMpfr(n-k)) } count <- 100 p <- double(count) for (k in 1:count) {     d <- (1 - perm(365, k) / (mpfr(365, precBits = 1024) ^ k)) * 100     p[k] <- asNumeric(d) } plot(1:count, p, xlab = "Number of people in the room",     ylabel="Probability in %")
require("Rmpfr")
require("Rmpfr") perm <- function(n, k) {     return (factorialMpfr(n)/factorialMpfr(n-k)) } count <- 50 p <- double(count) for (k in 1:count) {     d <- (1 - perm(365, k) / (mpfr(365, precBits = 1024) ^ k)) * 100     p[k] <- asNumeric(d) } plot(1:count, p, xlab = "Number of people in the room",     ylab="Probability in %")
require("Rmpfr") perm <- function(n, k) {     return (factorialMpfr(n)/factorialMpfr(n-k)) } count <- 100 p <- double(count) for (k in 1:count) {     d <- (1 - perm(365, k) / (mpfr(365, precBits = 1024) ^ k)) * 100     p[k] <- asNumeric(d) } plot(1:count, p, xlab = "Number of people in the room",     ylab="Probability in %")
